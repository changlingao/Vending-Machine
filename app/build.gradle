/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'jacoco'
}

javafx {
    version = "18"
    modules = [ 'javafx.controls', 'javafx.fxml']
}

jacoco {
    toolVersion = "0.8.8"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // simple-json
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
}

application {
    // Define the main class for the application.
    mainClass = 'VendingMachine.App'
}

test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    // report is always generated after tests run
    test.finalizedBy jacocoTestReport
}

jacocoTestReport {
    // tests are required to run before generating the report
    dependsOn test
    reports {
        html.required = true
        csv.required = true
        // change jacoco html report directory
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    // exclude FrontEnd package in the report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'FrontEnd'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'PACKAGE'
            includes = [
                    // classes and methods to be included in the coverage verification
                    'VendingMachine'
            ]
            limit {
                // default counter and value
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.75 // unit test minimum code coverage requirement for the assignment
            }
        }
    }
}